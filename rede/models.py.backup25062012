#-*- encoding:utf-8 -*-
from django.db import models
from decimal import Decimal

# Create your models here.

class BlocoIP(models.Model):
    ip = models.IPAddressField('IP')
    mask = models.IntegerField()
    asn = models.ForeignKey('identificacao.ASN', verbose_name='AS')
    superbloco = models.ForeignKey('rede.BlocoIP', null=True, blank=True, verbose_name='Super bloco')
    designado = models.ForeignKey('identificacao.Entidade', null=True, blank=True)
    rir = models.ForeignKey('rede.RIR', null=True, blank=True, verbose_name='RIR')
    obs = models.TextField(null=True, blank=True)

    def __unicode__(self):
        return '%s/%s' % (self.ip, self.mask)
    __unicode__.admin_order_field = 'ip'

    def AS(self):
        return self.asn.numero
    AS.admin_order_field = 'asn__numero'

    def entidade(self):
	return self.asn.entidade.sigla
    entidade.admin_order_field = 'asn__entidade__sigla'

    def desig(self):
	return self.designado.sigla
    desig.admin_order_field = 'designado__sigla'
    desig.short_description = 'Designado para'

    class Meta:
        verbose_name = u'Bloco IP'
        verbose_name_plural = u'Blocos IP'
        ordering = ('ip',)


class RIR(models.Model):
    nome = models.CharField(max_length=40)

    def __unicode__(self):
        return self.nome


class Provedor(models.Model):
    ip = models.IPAddressField()
    mask = models.IntegerField()
    provedor = models.CharField(max_length=40)

    def __unicode__(self):
        return self.provedor


class Rota(models.Model):
    aspath = models.CharField(u'AS path', max_length=255)
    blocoip = models.ForeignKey('rede.BlocoIP', verbose_name='Bloco IP')
    nexthop = models.IPAddressField()
    provedor = models.ForeignKey('rede.Provedor')
    preferencial = models.BooleanField()
    local_pref = models.IntegerField(null=True, blank=True)
    historico = models.ForeignKey('rede.Historico')

    def __unicode__(self):
        return '%s %s' % (self.historico, self.blocoip)

class Historico(models.Model):
    arquivo = models.FileField(upload_to='rede')
    horario = models.DateTimeField(auto_now=True)
    equipamento = models.ForeignKey('patrimonio.Patrimonio', null=True, blank=True)


    def __unicode__(self):
        return self.horario


UNIDADES = (
        (1, 'bps'),
        (1000, 'kbps'),
        (1000000, 'Mbps'),
        (1000000000, 'Gbps'),
        (1000000000000, 'Tbps'),
        )


class Banda(models.Model):
    velocidade = models.IntegerField()
    unidade = models.IntegerField(choices=UNIDADES)

    def __unicode__(self):
        return '%s %s' % (self.velocidade, self.get_unidade_display())

    class Meta:
        ordering = ('unidade', 'velocidade')

class Operadora(models.Model):
    nome = models.CharField(max_length=40)

    def __unicode__(self):
        return '%s' % self.nome

    class Meta:
        ordering = ('nome',)

class Enlace(models.Model):
    participante = models.ForeignKey('identificacao.Identificacao')
    entrada_ansp = models.ForeignKey('identificacao.Endereco', verbose_name='Ponto de entrada na ANSP', related_name='entrada')
    banda = models.ForeignKey('rede.Banda')
    operadora = models.ForeignKey('rede.Operadora')
    data_ativacao = models.DateField(null=True, blank=True)
    data_desativacao = models.DateField(null=True, blank=True)
    inoperante = models.BooleanField()
    obs = models.TextField(null=True, blank=True)

    def participante_display(self):
        return '%s' % self.participante.endereco.entidade.sigla
    participante_display.short_description = u'Participante'

    def entrada_display(self):
        return '%s' % self.entrada_ansp.entidade.sigla
    entrada_display.short_description = u'Ponto de entrada na ANSP'

    def __unicode__(self):
        return self.participante_display()

    class Meta:
        ordering = ('participante',)

class TipoServico(models.Model):
    nome = models.CharField(max_length=200)

    def __unicode__(self):
        return '%s' % self.nome

class TipoServico(models.Model):
    nome = models.CharField(max_length=200)

    def __unicode__(self):
        return '%s' % self.nome

class Projeto(models.Model):
    nome = models.CharField(max_length=200)

    def __unicode__(self):
        return '%s' % self.nome

class Unidade(models.Model):
    nome = models.CharField(max_length=30)

    def __unicode__(self):
        return '%s' % self.nome

class PlanejaAquisicaoRecurso(models.Model):
    os = models.ForeignKey('outorga.OrdemDeServico', null=True, blank=True)
    contrato = models.ForeignKey('outorga.Contrato', null=True, blank=True)
    quantidade = models.FloatField()
    valor_unitario = models.DecimalField(u'Valor unitário sem imposto', max_digits=12, decimal_places=2)
    tipo = models.ForeignKey('rede.TipoServico', verbose_name=u'Tipo de descrição')
    referente = models.CharField(max_length=150, null=True, blank=True)
    projeto = models.ForeignKey('rede.Projeto')
    unidade = models.ForeignKey('rede.Unidade')
    instalacao = models.BooleanField(u'Instalação')
    obs = models.TextField(null=True, blank=True)
    ano = models.IntegerField()

    def __unicode__(self):
        return '%s - %s - %s - %s' % (self.os, self.tipo, self.quantidade, self.valor_unitario)

    @property
    def valor_total(self):
        q = Decimal(str(self.quantidade))
	return q * self.valor_unitario

    class Meta:
        verbose_name = u'Planeja Aquisição de Recursos'
        verbose_name_plural = u'Planeja Aquisição de Recursos'

class Recurso(models.Model):
    complemento = models.CharField(max_length=100, null=True, blank=True)
    quantidade = models.FloatField()
    valor_imposto = models.DecimalField(u'Valor total do imposto', max_digits=12, decimal_places=2)
    pagamento = models.ForeignKey('financeiro.Pagamento', null=True, blank=True)
    planejamento = models.ForeignKey('rede.PlanejaAquisicaoRecurso')

    def __unicode__(self):
        return '%s - %s - %s' % (self.planejamento.os, self.planejamento.tipo, self.quantidade)

"""
class Projeto(models.Model):
    nome = models.CharField(max_length=200)

    def __unicode__(self):
        return '%s' % self.nome

class Unidade(models.Model):
    nome = models.CharField(max_length=30)

    def __unicode__(self):
	return '%s' % self.nome

class PrestaServico(models.Model):
    referente = models.CharField(max_length=45, null=True, blank=True)
    quantidade = models.FloatField()
    complemento = models.CharField(max_length=100, null=True, blank=True)
    valor_unitario = models.DecimalField(u'Valor unitário sem imposto', max_digits=12, decimal_places=2)
    valor_imposto = models.DecimalField(u'Valor total do imposto', max_digits=12, decimal_places=2)
    os = models.ForeignKey('outorga.OrdemDeServico')
    tipo = models.ForeignKey('rede.TipoServico', verbose_name=u'Tipo de descrição')
    pagamento = models.ManyToManyField('financeiro.Pagamento', null=True, blank=True)
    projeto = models.ForeignKey('rede.Projeto')
    unidade = models.ForeignKey('rede.Unidade')
    instalacao = models.BooleanField(u'Instalação')
    obs = models.TextField(null=True, blank=True)

    def __unicode__(self):
        return '%s - %s' % (self.os, self.tipo)

    class Meta:
        verbose_name = u'Presta Serviço'
        verbose_name_plural = u'Presta Serviços'
"""
